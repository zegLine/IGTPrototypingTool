/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/current/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application
    id 'application'
	// Apply JavaFX plugin, necessary for GUI
    id 'org.openjfx.javafxplugin' version '0.1.0'
    // Checkstyle enforces consistent formatting rules across the project.
    id 'checkstyle'
    // Spotbugs is a static analyzer for java
    id 'com.github.spotbugs' version '6.0.8'
    // With this plugin, we can build a Windows executable
    id 'edu.sc.seis.launch4j' version '3.0.5'
}

javafx {
	version = '17'
	modules = ['javafx.controls', 'javafx.fxml']
}

// enforce utf-8 encoding
compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'
javadoc.options.encoding = 'UTF-8'

repositories {
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
}

dependencies {
    implementation 'net.java.dev.jna:jna-platform:5.6.0'
    implementation 'org.openpnp:opencv:4.9.0-0'
    implementation 'org.hamcrest:hamcrest-core:2.2'
    implementation 'com.massisframework.jme3:jme3-core:3.1.0-beta2'
    implementation 'org.apache.commons:commons-math3:3.6.1'
    implementation 'org.apache.commons:commons-csv:1.10.0'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'org.json:json:20240303'

    // Use JavaFX MeshImporter for STL files
    implementation 'us.ihmc:jimStlMeshImporterJFX:0.7'

    // Use JUnit test framework
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.2'
    testRuntimeOnly 'org.junit.platform:junit-platform-commons:1.10.2'
}

// JUnit 5 support
test {
    useJUnitPlatform()
    filter {
         // exclude openIGTLink connection and transmission tests in automated testing
         excludeTestsMatching "inputOutput.OpenIGTImageSource*"
         // exclude live- and filestream tests
         excludeTestsMatching "inputOutput.*stream*"
    }
}

application {
    // Define the main class for the application
    mainClass = 'mainMethod.StartClass'
}


checkstyle {
    // change path to use other checkstyle configuration
    configFile = rootProject.file('config/checkstyle/minimalcheck.xml')
    toolVersion = '10.12.3'
}

tasks.withType(Checkstyle) {
    reports {
        xml.required  = false
        html.required  = true
    }
}

spotbugs{
    ignoreFailures = true
}

spotbugsMain {
    reports {
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/main/spotbugs.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
}



